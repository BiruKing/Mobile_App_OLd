// Generated by view binder compiler. Do not edit!
package com.ethiop.drivinglicencevalidation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.ethiop.drivinglicencevalidation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ValidationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView Penality;

  @NonNull
  public final Button button;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final ImageView imageView5;

  @NonNull
  public final Button nav;

  private ValidationBinding(@NonNull ConstraintLayout rootView, @NonNull TextView Penality,
      @NonNull Button button, @NonNull ImageView imageView3, @NonNull ImageView imageView5,
      @NonNull Button nav) {
    this.rootView = rootView;
    this.Penality = Penality;
    this.button = button;
    this.imageView3 = imageView3;
    this.imageView5 = imageView5;
    this.nav = nav;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ValidationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ValidationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.validation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ValidationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Penality;
      TextView Penality = rootView.findViewById(id);
      if (Penality == null) {
        break missingId;
      }

      id = R.id.button;
      Button button = rootView.findViewById(id);
      if (button == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = rootView.findViewById(id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.imageView5;
      ImageView imageView5 = rootView.findViewById(id);
      if (imageView5 == null) {
        break missingId;
      }

      id = R.id.nav;
      Button nav = rootView.findViewById(id);
      if (nav == null) {
        break missingId;
      }

      return new ValidationBinding((ConstraintLayout) rootView, Penality, button, imageView3,
          imageView5, nav);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
